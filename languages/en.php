<?php

$api = array(
	'Exception:MissingParameterInMethod' => 'Missing parameter %s',
	'Exception:UnrecognisedTypeCast' => 'Unrecognised type in cast %s for variable %s',
	'Exception:AlgorithmNotSupported' => 'Algorithm %s is not supported or has been disabled.',
	'Exception:MissingAPIKey' => 'Invalid or missing API key',
	'Exception:BadAPIKey' => 'Bad API key',
	'Exception:MissingHmac' => 'Missing X-Elgg-hmac header',
	'Exception:MissingHmacAlgo' => 'Missing X-Elgg-hmac-algo header',
	'Exception:MissingTime' => 'Missing X-Elgg-time header',
	'Exception:MissingNonce' => 'Missing X-Elgg-nonce header',
	'Exception:TemporalDrift' => 'X-Elgg-time is too far in the past or future. Epoch fail.',
	'Exception:NoQueryString' => 'No data on the query string',
	'Exception:MissingPOSTHash' => 'Missing X-Elgg-posthash header',
	'Exception:MissingPOSTAlgo' => 'Missing X-Elgg-posthash_algo header',
	'Exception:MissingContentType' => 'Missing content type for post data',
	'Exception:InvalidPostHash' => 'POST data hash is invalid - Expected %s but got %s.',
	'Exception:DupePacket' => 'Packet signature already seen.',
	'Exception:UnknownType' => 'An unrecoverable error has occurred and has been logged',
	'Exception:UnsupportedEnumValue' => 'Unsupported value %s for enumerated parameter %s. Supported values are: %s',
);

$admin = array(
	'admin:graph' => 'RESTful Graph',
	'admin:graph:provider' => 'API Provider',
	'admin:graph:consumers' => 'API Consumers',
	'admin:graph:add_consumer' => 'Add new consumer',
	'admin:graph:consumers:edit' => 'Edit consumer',
	'admin:graph:consumers:none' => 'You have not created any consumers yet',
	'graph:consumers:title' => 'Consumer Name',
	'graph:consumers:title:help' => 'Consumer name used as reference',
	'graph:consumers:description' => 'Consumer Description',
	'graph:consumers:description:help' => 'Describe how this consumer consumes web services',
	'graph:consumers:owner_username' => 'Consumer Owner',
	'graph:consumers:owner_username:help' => 'Each consumer is owned by an actual Elgg user. This allows certain consumers to authenticate without using user credentials',
	'graph:consumers:allowed_endpoints' => 'Allowed graph endpoints',
	'graph:consumers:allowed_endpoints:help' => 'Specify, which graph endpoints this consumer is allowed to access/consume. <strong>Exercise caution when enabling sensitive methods.</strong>',
	'graph:consumers:public_key' => 'Public Key',
	'graph:consumers:private_key' => 'Secret Key',
	'graph:consumers:edit:success' => 'API Consumer has been successfully saved',
	'graph:consumers:edit:error' => 'API Consumer could not be saved',
	'graph:consumers:not_found' => 'API Consumer does not exist or you do not have permissions to access it',
	'graph:users:not_found' => 'API User does not exist or you do not have permissions to access it',
	'graph:consumers:api_user' => 'API Auth',
	'graph:consumers:api_user:help' => 'By providing a username and password, you can allow this API Consumer to generate a token to be sign requests on behalf of the user that owns it. This allows your external app to authenticate without using user login credentials, and then obtain another token to perform actions on behalf of a user that the owner of this clien can edit. Use this option with caution - it is only suitable for apps that you trust/own. Keep these credentials safe.',
	'graph:consumers:api_username' => 'Consumer Username',
	'graph:consumers:api_password' => 'Consumer Password',
	'graph:consumers:api_password2' => 'Confirm Password',
	'graph:consumers:keygen' => 'Regenerate keys',
	'graph:consumers:keygen:success' => 'Keys have been regenerated',
	'graph:consumers:delete:success' => 'API Consumer has been successfully deleted',
	'graph:consumers:delete:error' => 'API Consumer could not be deleted',
	'graph:enabled' => 'Enabled',
	'graph:toggle_all' => 'Toggle all',
	'graph:endpoint' => 'Endpoint',
	'graph:param' => 'Parameter',
	'graph:type' => 'Type',
	'graph:default' => 'Default',
	'graph:required' => 'Required',
	'graph:enum_options' => 'Enum',
	'graph:description' => 'Description',
	'graph:require_api_auth' => 'API Auth',
	'graph:require_user_auth' => 'User Auth',
	'graph:provider:api_auth' => 'Allowed API authentication methods',
	'graph:provider:auth_api_key' => 'Key-based authentication',
	'graph:provider:auth_hmac' => 'Signature-based authentication',
	//'graph:provider:auth_http_basic_auth' => 'HTTP Basic authentication',
	'graph:provider:user_auth' => 'Allowed user authentication methods (in web services context)',
	'graph:provider:auth_usertoken' => 'With a user token obtained from web services in exchange for username and password',
	'graph:provider:auth_consumer_userpass' => 'With API consumer username and password',
	'graph:settings:debug_mode' => 'Enable debug mode',
);

$endpoints = array(
	'GET /' => 'Returns a list of graph endpoints configured on the site',
	'GET /:site' => 'Returns site entity attritubes and basic configuration values',
	'GET /:site/users' => 'Returns a list of users registered on the site',
	'POST /:site/users' => 'Registers a new user on the site',
	'GET /:site/activity' => 'Returns a list of latest site activity (river)',
	'POST /:site/activity' => 'Adds a new activity (river) item to the feed',
	'GET /:user' => 'Returns a user',
	'DELETE /:user' => 'Deletes a user',
	'POST /:user/token' => 'Create a new access token for the user',
	'PUT /:user/token' => 'Exchanges a short lived access token for a token with a 30-day validity',
	'DELETE /:user/token' => 'Revokes a user token',
	'GET /:object' => 'Returns an object',
	'DELETE /:object' => 'Deletes an object',
	'GET /:activity' => 'Returns a single activity (river) item',
	'DELETE /:activity' => 'Deletes a single activity (river) item',
	'GET /:user/activity' => 'Returns a list of activity (river) items where a user is either a subject, object or target',
	'POST /:user/activity' => 'Adds a new activity (river) item with the user as a subject',
	'GET /:comment' => 'Returns a single comment',
	'PUT /:comment' => 'Update s a single comment',
	'DELETE /:comment' => 'Deletes a single comment',
	'GET /:object/comments' => 'Returns a list of comments made on the object',
	'POST /:object/comments' => 'Adds a new comment on the object',
	'GET /:like' => 'Returns a single like',
	'DELETE /:like' => 'Deletes a single like',
	'GET /:object/likes' => 'Returns a list of object likes',
	'POST /:object/likes' => 'Likes an object on behalf of the authenticated user',
	'DELETE /:object/likes' => 'Unlikes an object on behalf of the authenticated user',
	'GET /:group' => 'Returns a single group',
	'PUT /:group' => 'Updates a group',
	'DELETE /:group' => 'Deletes a group',
	'GET /:group/members' => 'Returns a list of group members',
	'POST /:group/members' => 'Adds user as a member of a group (or creates a membership request for closed group)',
	'DELETE /:group/members' => 'Revokes membership in a group (or deletes membership request or revokes invitation)',
	'GET /:site/groups' => 'Returns a list of all groups on the site',
	'POST /:site/groups' => 'Creates a new group',
	'GET /:user/groups' => 'Returns a list of all groups created by the user',
	'POST /:user/groups' => 'Creates a new group',
	'GET /:user/groups/membership' => 'Returns a list of all groups a user is a member of',
	'GET /:blog' => 'Returns a single blog',
	'PUT /:blog' => 'Updates a blog post',
	'DELETE /:blog' => 'Deletes a blog post',
	'GET /:group/blogs' => 'Returns a list of all group blogs',
	'POST /:group/blogs' => 'Creates a new group blog',
	'GET /:site/blogs' => 'Returns a list of all blogs on the site',
	'GET /:user/blogs' => 'Returns a list of all blogs by the user',
	'POST /:user/blogs' => 'Creates a new blog',
);

$params = array(
	'graph:param:access_id' => 'ID of an access collection',
	'graph:param:limit' => 'Number of entries to return (max 50)',
	'graph:param:offset' => 'Offset from the start of the list',
	'graph:param:sort' => 'Sorting order',
	'graph:param:email' => 'Email address',
	'graph:param:username' => 'Email address (generated automatically, if omitted)',
	'graph:param:passwrd' => 'Password (generated automatically, if omitted)',
	'graph:param:name' => 'Display name',
	'graph:param:language' => 'Language code',
	'graph:param:notify' => 'Send email notification',
	'graph:param:friend_uid' => 'UID of another user that invited this user',
	'graph:param:invitecode' => 'Invitation code',
	'graph:param:types' => 'Entity types',
	'graph:param:subtypes' => 'Entity subtypes',
	'graph:param:action_types' => 'Action types',
	'graph:param:action' => 'Action',
	'graph:param:view' => 'Existing view',
	'graph:param:subject_uid' => 'UID of the subject',
	'graph:param:object_uid' => 'UID of the object',
	'graph:param:target_uid' => 'UID of the target',
	'graph:param:annotation_uid' => 'UID of the annotation',
	'graph:param:auth_token' => 'Access Token',
	'graph:param:comment' => 'Comment',
	'graph:param:relationship' => 'Relationship name',
	
);

add_translation('en', array_merge($api, $admin, $endpoints, $params));
